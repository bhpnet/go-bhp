// Copyright 2014 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package core

import (
	"bytes"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethdb"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
	"github.com/ethereum/go-ethereum/rlp"
	"github.com/ethereum/go-ethereum/trie"
)

//go:generate gencodec -type Genesis -field-override genesisSpecMarshaling -out gen_genesis.go
//go:generate gencodec -type GenesisAccount -field-override genesisAccountMarshaling -out gen_genesis_account.go

var errGenesisNoConfig = errors.New("genesis has no chain configuration")

// Genesis specifies the header fields, state of a genesis block. It also defines hard
// fork switch-over blocks through the chain configuration.
type Genesis struct {
	Config     *params.ChainConfig `json:"config"`
	Nonce      uint64              `json:"nonce"`
	Timestamp  uint64              `json:"timestamp"`
	ExtraData  []byte              `json:"extraData"`
	GasLimit   uint64              `json:"gasLimit"   gencodec:"required"`
	Difficulty *big.Int            `json:"difficulty" gencodec:"required"`
	Mixhash    common.Hash         `json:"mixHash"`
	Coinbase   common.Address      `json:"coinbase"`
	Alloc      GenesisAlloc        `json:"alloc"      gencodec:"required"`

	// These fields are used for consensus tests. Please don't use them
	// in actual genesis blocks.
	Number     uint64      `json:"number"`
	GasUsed    uint64      `json:"gasUsed"`
	ParentHash common.Hash `json:"parentHash"`
}

// GenesisAlloc specifies the initial state that is part of the genesis block.
type GenesisAlloc map[common.Address]GenesisAccount

func (ga *GenesisAlloc) UnmarshalJSON(data []byte) error {
	m := make(map[common.UnprefixedAddress]GenesisAccount)
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	*ga = make(GenesisAlloc)
	for addr, a := range m {
		(*ga)[common.Address(addr)] = a
	}
	return nil
}

// GenesisAccount is an account in the state of the genesis block.
type GenesisAccount struct {
	Code       []byte                      `json:"code,omitempty"`
	Storage    map[common.Hash]common.Hash `json:"storage,omitempty"`
	Balance    *big.Int                    `json:"balance" gencodec:"required"`
	Nonce      uint64                      `json:"nonce,omitempty"`
	PrivateKey []byte                      `json:"secretKey,omitempty"` // for tests
}

// field type overrides for gencodec
type genesisSpecMarshaling struct {
	Nonce      math.HexOrDecimal64
	Timestamp  math.HexOrDecimal64
	ExtraData  hexutil.Bytes
	GasLimit   math.HexOrDecimal64
	GasUsed    math.HexOrDecimal64
	Number     math.HexOrDecimal64
	Difficulty *math.HexOrDecimal256
	Alloc      map[common.UnprefixedAddress]GenesisAccount
}

type genesisAccountMarshaling struct {
	Code       hexutil.Bytes
	Balance    *math.HexOrDecimal256
	Nonce      math.HexOrDecimal64
	Storage    map[storageJSON]storageJSON
	PrivateKey hexutil.Bytes
}

// storageJSON represents a 256 bit byte array, but allows less than 256 bits when
// unmarshaling from hex.
type storageJSON common.Hash

func (h *storageJSON) UnmarshalText(text []byte) error {
	text = bytes.TrimPrefix(text, []byte("0x"))
	if len(text) > 64 {
		return fmt.Errorf("too many hex characters in storage key/value %q", text)
	}
	offset := len(h) - len(text)/2 // pad on the left
	if _, err := hex.Decode(h[offset:], text); err != nil {
		fmt.Println(err)
		return fmt.Errorf("invalid hex storage key/value %q", text)
	}
	return nil
}

func (h storageJSON) MarshalText() ([]byte, error) {
	return hexutil.Bytes(h[:]).MarshalText()
}

// GenesisMismatchError is raised when trying to overwrite an existing
// genesis block with an incompatible one.
type GenesisMismatchError struct {
	Stored, New common.Hash
}

func (e *GenesisMismatchError) Error() string {
	return fmt.Sprintf("database contains incompatible genesis (have %x, new %x)", e.Stored, e.New)
}

// SetupGenesisBlock writes or updates the genesis block in db.
// The block that will be used is:
//
//                          genesis == nil       genesis != nil
//                       +------------------------------------------
//     db has no genesis |  main-net default  |  genesis
//     db has genesis    |  from DB           |  genesis (if compatible)
//
// The stored chain configuration will be updated if it is compatible (i.e. does not
// specify a fork block below the local head block). In case of a conflict, the
// error is a *params.ConfigCompatError and the new, unwritten config is returned.
//
// The returned chain configuration is never nil.
func SetupGenesisBlock(db ethdb.Database, genesis *Genesis) (*params.ChainConfig, common.Hash, error) {
	if genesis != nil && genesis.Config == nil {
		return params.AllEthashProtocolChanges, common.Hash{}, errGenesisNoConfig
	}
	// Just commit the new block if there is no stored genesis block.
	stored := rawdb.ReadCanonicalHash(db, 0)
	if (stored == common.Hash{}) {
		if genesis == nil {
			log.Info("Writing default main-net genesis block")
			genesis = DefaultGenesisBlock()
		} else {
			log.Info("Writing custom genesis block")
		}
		block, err := genesis.Commit(db)
		if err != nil {
			return genesis.Config, common.Hash{}, err
		}
		return genesis.Config, block.Hash(), nil
	}

	// We have the genesis block in database(perhaps in ancient database)
	// but the corresponding state is missing.
	header := rawdb.ReadHeader(db, stored, 0)
	if _, err := state.New(header.Root, state.NewDatabaseWithConfig(db, nil), nil); err != nil {
		if genesis == nil {
			genesis = DefaultGenesisBlock()
		}
		// Ensure the stored genesis matches with the given one.
		hash := genesis.ToBlock(nil).Hash()
		if hash != stored {
			return genesis.Config, hash, &GenesisMismatchError{stored, hash}
		}
		block, err := genesis.Commit(db)
		if err != nil {
			return genesis.Config, hash, err
		}
		return genesis.Config, block.Hash(), nil
	}

	// Check whether the genesis block is already written.
	if genesis != nil {
		hash := genesis.ToBlock(nil).Hash()
		if hash != stored {
			return genesis.Config, hash, &GenesisMismatchError{stored, hash}
		}
	}

	// Get the existing chain configuration.
	newcfg := genesis.configOrDefault(stored)
	if err := newcfg.CheckConfigForkOrder(); err != nil {
		return newcfg, common.Hash{}, err
	}
	storedcfg := rawdb.ReadChainConfig(db, stored)
	if storedcfg == nil {
		log.Warn("Found genesis block without chain config")
		rawdb.WriteChainConfig(db, stored, newcfg)
		return newcfg, stored, nil
	}
	// Special case: don't change the existing config of a non-mainnet chain if no new
	// config is supplied. These chains would get AllProtocolChanges (and a compat error)
	// if we just continued here.
	if genesis == nil && stored != params.MainnetGenesisHash {
		return storedcfg, stored, nil
	}

	// Check config compatibility and write the config. Compatibility errors
	// are returned to the caller unless we're already at block zero.
	height := rawdb.ReadHeaderNumber(db, rawdb.ReadHeadHeaderHash(db))
	if height == nil {
		return newcfg, stored, fmt.Errorf("missing block number for head header hash")
	}
	compatErr := storedcfg.CheckCompatible(newcfg, *height)
	if compatErr != nil && *height != 0 && compatErr.RewindTo != 0 {
		return newcfg, stored, compatErr
	}
	rawdb.WriteChainConfig(db, stored, newcfg)
	return newcfg, stored, nil
}

func (g *Genesis) configOrDefault(ghash common.Hash) *params.ChainConfig {
	switch {
	case g != nil:
		return g.Config
	case ghash == params.MainnetGenesisHash:
		return params.MainnetChainConfig
	case ghash == params.TestnetGenesisHash:
		return params.TestnetChainConfig
	default:
		return params.AllEthashProtocolChanges
	}
}

// ToBlock creates the genesis block and writes state of a genesis specification
// to the given database (or discards it if nil).
func (g *Genesis) ToBlock(db ethdb.Database) *types.Block {
	if db == nil {
		db = rawdb.NewMemoryDatabase()
	}
	statedb, _ := state.New(common.Hash{}, state.NewDatabase(db), nil)
	for addr, account := range g.Alloc {
		statedb.AddBalance(addr, account.Balance)
		statedb.SetCode(addr, account.Code)
		statedb.SetNonce(addr, account.Nonce)
		for key, value := range account.Storage {
			statedb.SetState(addr, key, value)
		}
	}
	root := statedb.IntermediateRoot(false)
	head := &types.Header{
		Number:     new(big.Int).SetUint64(g.Number),
		Nonce:      types.EncodeNonce(g.Nonce),
		Time:       g.Timestamp,
		ParentHash: g.ParentHash,
		Extra:      g.ExtraData,
		GasLimit:   g.GasLimit,
		GasUsed:    g.GasUsed,
		Difficulty: g.Difficulty,
		MixDigest:  g.Mixhash,
		Coinbase:   g.Coinbase,
		Root:       root,
	}
	if g.GasLimit == 0 {
		head.GasLimit = params.GenesisGasLimit
	}
	if g.Difficulty == nil {
		head.Difficulty = params.GenesisDifficulty
	}
	statedb.Commit(false)
	statedb.Database().TrieDB().Commit(root, true, nil)

	return types.NewBlock(head, nil, nil, nil, new(trie.Trie))
}

// Commit writes the block and state of a genesis specification to the database.
// The block is committed as the canonical head block.
func (g *Genesis) Commit(db ethdb.Database) (*types.Block, error) {
	block := g.ToBlock(db)
	if block.Number().Sign() != 0 {
		return nil, fmt.Errorf("can't commit genesis block with number > 0")
	}
	config := g.Config
	if config == nil {
		config = params.AllEthashProtocolChanges
	}
	if err := config.CheckConfigForkOrder(); err != nil {
		return nil, err
	}
	rawdb.WriteTd(db, block.Hash(), block.NumberU64(), g.Difficulty)
	rawdb.WriteBlock(db, block)
	rawdb.WriteReceipts(db, block.Hash(), block.NumberU64(), nil)
	rawdb.WriteCanonicalHash(db, block.Hash(), block.NumberU64())
	rawdb.WriteHeadBlockHash(db, block.Hash())
	rawdb.WriteHeadFastBlockHash(db, block.Hash())
	rawdb.WriteHeadHeaderHash(db, block.Hash())
	rawdb.WriteChainConfig(db, block.Hash(), config)
	return block, nil
}

// MustCommit writes the genesis block and state to db, panicking on error.
// The block is committed as the canonical head block.
func (g *Genesis) MustCommit(db ethdb.Database) *types.Block {
	block, err := g.Commit(db)
	if err != nil {
		panic(err)
	}
	return block
}

// GenesisBlockForTesting creates and writes a block in which addr has the given wei balance.
func GenesisBlockForTesting(db ethdb.Database, addr common.Address, balance *big.Int) *types.Block {
	g := Genesis{Alloc: GenesisAlloc{addr: {Balance: balance}}}
	return g.MustCommit(db)
}

// DefaultGenesisBlock returns the Ethereum main net genesis block.
func DefaultGenesisBlock() *Genesis {
	return &Genesis{
		Config:     params.MainnetChainConfig,
		Nonce:      0,
		ExtraData:  hexutil.MustDecode("0x00000000000000000000000000000000000000000000000000000000000000000941a01ab7b3a39ed6f55d6a4907778a3f15e5c90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
		GasLimit:   0x47b760,
		Difficulty: big.NewInt(1),
		Timestamp:  0x5fbb9e51,
		Alloc: map[common.Address]GenesisAccount{
			common.HexToAddress("0x2d2d68a59880eaacf24b96731956d287482dac4b"): {Balance: new(big.Int).Mul(big.NewInt(100000000), big.NewInt(1e18))},
			common.HexToAddress("0x000000000000000000000000000000000000f000"): {Balance: new(big.Int), Code: common.FromHex("0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063be645692116100a2578063db78dd2811610071578063db78dd281461022f578063e0d8ea5314610254578063ea7221a11461025c578063efd8d8e21461022f578063f62af26c1461028257610116565b8063be645692146101e3578063c967f90f146101eb578063cb1ea7251461020a578063d93d2cb91461021257610116565b80633a061bd3116100e95780633a061bd31461019b57806344c1aa99146101a35780636233be5d146101ab57806363e1d451146101b35780638129fc1c146101d957610116565b8063158ef93e1461011b5780631b5e358c146101375780632897183d1461015b57806332f3c17f14610175575b600080fd5b61012361029f565b604080519115158252519081900360200190f35b61013f6102a8565b604080516001600160a01b039092168252519081900360200190f35b6101636102ae565b60408051918252519081900360200190f35b6101636004803603602081101561018b57600080fd5b50356001600160a01b03166102b4565b61013f6102cf565b6101636102d5565b61013f6102db565b610123600480360360208110156101c957600080fd5b50356001600160a01b03166102e1565b6101e161050d565b005b61016361058f565b6101f361059c565b6040805161ffff9092168252519081900360200190f35b6101636105a1565b6101e16004803603602081101561022857600080fd5b50356105a7565b61023761084a565b6040805167ffffffffffffffff9092168252519081900360200190f35b61016361084f565b6101e16004803603602081101561027257600080fd5b50356001600160a01b0316610855565b61013f6004803603602081101561029857600080fd5b5035610b6b565b60005460ff1681565b61f00181565b60035481565b6001600160a01b031660009081526005602052604090205490565b61f00081565b60025481565b61f00281565b6000805460ff16610328576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b3361f0001461037e576040805162461bcd60e51b815260206004820152601860248201527f56616c696461746f727320636f6e7472616374206f6e6c790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600090815260056020526040902054156103b6576001600160a01b0382166000908152600560205260408120555b6001600160a01b03821660009081526005602052604090206002015460ff1680156103e2575060065415155b15610505576006546001600160a01b038316600090815260056020526040902060010154600019909101146104ac576006805460009190600019810190811061042757fe5b60009182526020808320909101546001600160a01b038681168452600590925260409092206001015460068054929093169350839291811061046557fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790558583168252600590526040808220600190810154949093168252902001555b60068054806104b757fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038416825260059052604081206001810191909155600201805460ff191690555b506001919050565b60005460ff161561055b576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b600480546001600160a01b03191661f000179055600860019081556018600255600c6003556000805460ff19169091179055565b6801bc16d674ec80000081565b601581565b60015481565b3341146105e8576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b4360009081526008602052604090205460ff1615610641576040805162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48191958dc99585cd959607a1b604482015290519081900360640190fd5b60005460ff16610687576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b8080438161069157fe5b06156106d7576040805162461bcd60e51b815260206004820152601060248201526f426c6f636b2065706f6368206f6e6c7960801b604482015290519081900360640190fd5b436000908152600860205260409020805460ff191660011790556006546106fd57610846565b60005b60065481101561081b576003546002548161071757fe5b04600560006006848154811061072957fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205411156107da576003546002548161076157fe5b04600560006006848154811061077357fe5b60009182526020808320909101546001600160a01b031683528201929092526040018120546006805493909103926005929190859081106107b057fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902055610813565b600060056000600684815481106107ed57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b600101610700565b506040517f181d51be54e8e8eaca6eae0eab32d4162099236bd519e7238d015d0870db464190600090a15b5050565b606481565b60065490565b334114610896576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b60005460ff166108dc576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b4360009081526007602052604090205460ff1615610934576040805162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c1d5b9a5cda195960821b604482015290519081900360640190fd5b436000908152600760209081526040808320805460ff191660011790556001600160a01b0384168352600590915290206002015460ff166109dd57600680546001600160a01b038316600081815260056020526040812060018082018590558085019095557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90930180546001600160a01b0319168317905552600201805460ff191690911790555b6001600160a01b03811660009081526005602052604090208054600101908190556002549081610a0957fe5b06610a965760048054604080516340a141ff60e01b81526001600160a01b0385811694820194909452905192909116916340a141ff9160248082019260009290919082900301818387803b158015610a6057600080fd5b505af1158015610a74573d6000803e3d6000fd5b5050506001600160a01b03821660009081526005602052604081205550610b29565b6001546001600160a01b03821660009081526005602052604090205481610ab957fe5b06610b295760048054604080516305dd095960e41b81526001600160a01b038581169482019490945290519290911691635dd095909160248082019260009290919082900301818387803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050505b6040805142815290516001600160a01b038316917f770e0cca42c35d00240986ce8d3ed438be04663c91dac6576b79537d7c180f1e919081900360200190a250565b60068181548110610b7857fe5b6000918252602090912001546001600160a01b031690508156fea264697066735822122038d998ce24eab6e0762f628c9ddd5e55fa1ae90956bbf1a9f8af4a1e602daf6364736f6c63430006010033")},
			common.HexToAddress("0x000000000000000000000000000000000000F001"): {Balance: new(big.Int), Code: common.FromHex("0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063be645692116100a2578063db78dd2811610071578063db78dd281461022f578063e0d8ea5314610254578063ea7221a11461025c578063efd8d8e21461022f578063f62af26c1461028257610116565b8063be645692146101e3578063c967f90f146101eb578063cb1ea7251461020a578063d93d2cb91461021257610116565b80633a061bd3116100e95780633a061bd31461019b57806344c1aa99146101a35780636233be5d146101ab57806363e1d451146101b35780638129fc1c146101d957610116565b8063158ef93e1461011b5780631b5e358c146101375780632897183d1461015b57806332f3c17f14610175575b600080fd5b61012361029f565b604080519115158252519081900360200190f35b61013f6102a8565b604080516001600160a01b039092168252519081900360200190f35b6101636102ae565b60408051918252519081900360200190f35b6101636004803603602081101561018b57600080fd5b50356001600160a01b03166102b4565b61013f6102cf565b6101636102d5565b61013f6102db565b610123600480360360208110156101c957600080fd5b50356001600160a01b03166102e1565b6101e161050d565b005b61016361058f565b6101f361059c565b6040805161ffff9092168252519081900360200190f35b6101636105a1565b6101e16004803603602081101561022857600080fd5b50356105a7565b61023761084a565b6040805167ffffffffffffffff9092168252519081900360200190f35b61016361084f565b6101e16004803603602081101561027257600080fd5b50356001600160a01b0316610855565b61013f6004803603602081101561029857600080fd5b5035610b6b565b60005460ff1681565b61f00181565b60035481565b6001600160a01b031660009081526005602052604090205490565b61f00081565b60025481565b61f00281565b6000805460ff16610328576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b3361f0001461037e576040805162461bcd60e51b815260206004820152601860248201527f56616c696461746f727320636f6e7472616374206f6e6c790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600090815260056020526040902054156103b6576001600160a01b0382166000908152600560205260408120555b6001600160a01b03821660009081526005602052604090206002015460ff1680156103e2575060065415155b15610505576006546001600160a01b038316600090815260056020526040902060010154600019909101146104ac576006805460009190600019810190811061042757fe5b60009182526020808320909101546001600160a01b038681168452600590925260409092206001015460068054929093169350839291811061046557fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790558583168252600590526040808220600190810154949093168252902001555b60068054806104b757fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038416825260059052604081206001810191909155600201805460ff191690555b506001919050565b60005460ff161561055b576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b600480546001600160a01b03191661f000179055600860019081556018600255600c6003556000805460ff19169091179055565b6801bc16d674ec80000081565b601581565b60015481565b3341146105e8576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b4360009081526008602052604090205460ff1615610641576040805162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48191958dc99585cd959607a1b604482015290519081900360640190fd5b60005460ff16610687576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b8080438161069157fe5b06156106d7576040805162461bcd60e51b815260206004820152601060248201526f426c6f636b2065706f6368206f6e6c7960801b604482015290519081900360640190fd5b436000908152600860205260409020805460ff191660011790556006546106fd57610846565b60005b60065481101561081b576003546002548161071757fe5b04600560006006848154811061072957fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205411156107da576003546002548161076157fe5b04600560006006848154811061077357fe5b60009182526020808320909101546001600160a01b031683528201929092526040018120546006805493909103926005929190859081106107b057fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902055610813565b600060056000600684815481106107ed57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b600101610700565b506040517f181d51be54e8e8eaca6eae0eab32d4162099236bd519e7238d015d0870db464190600090a15b5050565b606481565b60065490565b334114610896576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b60005460ff166108dc576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b4360009081526007602052604090205460ff1615610934576040805162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c1d5b9a5cda195960821b604482015290519081900360640190fd5b436000908152600760209081526040808320805460ff191660011790556001600160a01b0384168352600590915290206002015460ff166109dd57600680546001600160a01b038316600081815260056020526040812060018082018590558085019095557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90930180546001600160a01b0319168317905552600201805460ff191690911790555b6001600160a01b03811660009081526005602052604090208054600101908190556002549081610a0957fe5b06610a965760048054604080516340a141ff60e01b81526001600160a01b0385811694820194909452905192909116916340a141ff9160248082019260009290919082900301818387803b158015610a6057600080fd5b505af1158015610a74573d6000803e3d6000fd5b5050506001600160a01b03821660009081526005602052604081205550610b29565b6001546001600160a01b03821660009081526005602052604090205481610ab957fe5b06610b295760048054604080516305dd095960e41b81526001600160a01b038581169482019490945290519290911691635dd095909160248082019260009290919082900301818387803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050505b6040805142815290516001600160a01b038316917f770e0cca42c35d00240986ce8d3ed438be04663c91dac6576b79537d7c180f1e919081900360200190a250565b60068181548110610b7857fe5b6000918252602090912001546001600160a01b031690508156fea264697066735822122038d998ce24eab6e0762f628c9ddd5e55fa1ae90956bbf1a9f8af4a1e602daf6364736f6c63430006010033")},
			common.HexToAddress("0x000000000000000000000000000000000000F002"): {Balance: new(big.Int), Code: common.FromHex("0x608060405234801561001057600080fd5b50600436106101005760003560e01c806382c4b3b211610097578063c967f90f11610066578063c967f90f146103fc578063db78dd281461041b578063e823c81414610440578063efd8d8e21461041b57610100565b806382c4b3b214610327578063a224cee71461034d578063a4c4d922146103bd578063be645692146103e257610100565b80631f4f7d29116100d35780631f4f7d29146101c157806332ed5b121461023f5780633a061bd3146103175780636233be5d1461031f57610100565b8063158ef93e1461010557806315ea2781146101215780631b5e358c146101475780631db5ade81461016b575b600080fd5b61010d610448565b604080519115158252519081900360200190f35b61010d6004803603602081101561013757600080fd5b50356001600160a01b0316610451565b61014f610506565b604080516001600160a01b039092168252519081900360200190f35b6101976004803603604081101561018157600080fd5b506001600160a01b03813516906020013561050c565b604080516001600160a01b0390941684526020840192909252151582820152519081900360600190f35b61010d600480360360408110156101d757600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561020157600080fd5b82018360208201111561021357600080fd5b803590602001918460018302840111600160201b8311171561023457600080fd5b509092509050610545565b61025c6004803603602081101561025557600080fd5b503561081f565b604080516001600160a01b03808a16825288166020808301919091526060820187905261ffff8087166080840152851660a083015283151560c083015260e0928201838152885193830193909352875191929161010084019189019080838360005b838110156102d65781810151838201526020016102be565b50505050905090810190601f1680156103035780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b61014f6108fe565b61014f610904565b61010d6004803603602081101561033d57600080fd5b50356001600160a01b031661090a565b6103bb6004803603602081101561036357600080fd5b810190602081018135600160201b81111561037d57600080fd5b82018360208201111561038f57600080fd5b803590602001918460208302840111600160201b831117156103b057600080fd5b50909250905061091f565b005b61010d600480360360408110156103d357600080fd5b50803590602001351515610a6a565b6103ea611187565b60408051918252519081900360200190f35b610404611194565b6040805161ffff9092168252519081900360200190f35b610423611199565b6040805167ffffffffffffffff9092168252519081900360200190f35b6103ea61119e565b60005460ff1681565b60003361f000146104a9576040805162461bcd60e51b815260206004820152601860248201527f56616c696461746f727320636f6e7472616374206f6e6c790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600081815260026020908152604091829020805460ff19169055815142815291517f4e0b191f7f5c32b1b5e3704b68874b1a3980147cae00be8ece271bfb5b92c07a9281900390910190a2506001919050565b61f00181565b60046020908152600092835260408084209091529082529020805460018201546002909201546001600160a01b03909116919060ff1683565b6001600160a01b03831660009081526002602052604081205460ff161561059d5760405162461bcd60e51b815260040180806020018281038252602981526020018061127d6029913960400191505060405180910390fd5b6000338585854260405160200180866001600160a01b03166001600160a01b031660601b8152601401856001600160a01b03166001600160a01b031660601b81526014018484808284379190910192835250506040805180830381526020928301909152805191012094505050610bb885111591506106589050576040805162461bcd60e51b815260206004820152601060248201526f44657461696c7320746f6f206c6f6e6760801b604482015290519081900360640190fd5b60008181526003602081905260409091200154156106bd576040805162461bcd60e51b815260206004820152601760248201527f50726f706f73616c20616c726561647920657869737473000000000000000000604482015290519081900360640190fd5b6106c56111a4565b3381526001600160a01b03861660208083019190915260408051601f870183900483028101830190915285815290869086908190840183828082843760009201829052506040808701958652426060880152878252600360209081529120865181546001600160a01b039182166001600160a01b031991821617835583890151600184018054919093169116179055945180518796955061076f94506002860193509101906111e1565b506060820151600382015560808201516004909101805460a084015160c09094015161ffff1990911661ffff9384161763ffff000019166201000093909416929092029290921764ff000000001916600160201b911515919091021790556040805142815290516001600160a01b03881691339185917fc10f2f4d53a0e342536c6af3cce9c6ee25c32dbb323521ce0e1d4494a3e362e8916020918190039190910190a450600195945050505050565b60036020908152600091825260409182902080546001808301546002808501805488516101009582161595909502600019011691909104601f81018790048702840187019097528683526001600160a01b03938416969390911694919290918301828280156108cf5780601f106108a4576101008083540402835291602001916108cf565b820191906000526020600020905b8154815290600101906020018083116108b257829003601f168201915b50505050600383015460049093015491929161ffff80821692506201000082041690600160201b900460ff1687565b61f00081565b61f00281565b60026020526000908152604090205460ff1681565b60005460ff161561096d576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b62093a80600155600580546001600160a01b03191661f00017905560005b81811015610a585760008383838181106109a157fe5b905060200201356001600160a01b03166001600160a01b03161415610a0d576040805162461bcd60e51b815260206004820152601960248201527f496e76616c69642076616c696461746f72206164647265737300000000000000604482015290519081900360640190fd5b600160026000858585818110610a1f57fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff191691151591909117905560010161098b565b50506000805460ff1916600117905550565b60055460408051631015428760e21b815233600482015290516000926001600160a01b0316916340550a1c916024808301926020929190829003018186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d6020811015610adf57600080fd5b5051610b23576040805162461bcd60e51b815260206004820152600e60248201526d56616c696461746f72206f6e6c7960901b604482015290519081900360640190fd5b60008381526003602081905260409091200154610b7c576040805162461bcd60e51b8152602060048201526012602482015271141c9bdc1bdcd85b081b9bdd08195e1a5cdd60721b604482015290519081900360640190fd5b33600090815260046020908152604080832086845290915290206001015415610bd65760405162461bcd60e51b81526004018080602001828103825260238152602001806112a66023913960400191505060405180910390fd5b60015460008481526003602081905260409091200154014210610c33576040805162461bcd60e51b815260206004820152601060248201526f141c9bdc1bdcd85b08195e1c1a5c995960821b604482015290519081900360640190fd5b336000818152600460209081526040808320878452825291829020426001820181905581546001600160a01b031916851782556002909101805460ff1916871515908117909155835190815291820152815186927f6c59bda68cac318717c60c7c9635a78a0f0613f9887cc18a7157f5745a86d14e928290030190a38115610ce1576000838152600360205260409020600401805461ffff8082166001011661ffff19909116179055610d15565b60008381526003602052604090206004018054600161ffff62010000808404821692909201160263ffff0000199091161790555b6000838152600360209081526040808320600101546001600160a01b03168352600290915290205460ff1680610d635750600083815260036020526040902060040154600160201b900460ff165b15610d7057506001611181565b600554604080516313bce04b60e31b815290516002926001600160a01b031691639de70258916004808301926000929190829003018186803b158015610db557600080fd5b505afa158015610dc9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610df257600080fd5b8101908080516040519392919084600160201b821115610e1157600080fd5b908301906020820185811115610e2657600080fd5b82518660208202830111600160201b82111715610e4257600080fd5b82525081516020918201928201910280838360005b83811015610e6f578181015183820152602001610e57565b505050509050016040525050505181610e8457fe5b60008581526003602052604090206004015491900460010161ffff90911610610fcc576000838152600360208181526040808420600181810180546001600160a01b03908116885260028652848820805460ff19169093179092558987529484526004918201805464ff000000001916600160201b1790556005549454835163415e9ec960e11b815290821692810192909252915193909116936382bd3d9293602480840194939192918390030190829087803b158015610f4457600080fd5b505af1158015610f58573d6000803e3d6000fd5b505050506040513d6020811015610f6e57600080fd5b505060008381526003602090815260409182902060010154825142815292516001600160a01b039091169286927fc9d96d61eb62031865c523ae107f3c22f5ed445af237636bcd88bea1705c70d592918290030190a3506001611181565b600554604080516313bce04b60e31b815290516002926001600160a01b031691639de70258916004808301926000929190829003018186803b15801561101157600080fd5b505afa158015611025573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561104e57600080fd5b8101908080516040519392919084600160201b82111561106d57600080fd5b90830190602082018581111561108257600080fd5b82518660208202830111600160201b8211171561109e57600080fd5b82525081516020918201928201910280838360005b838110156110cb5781810151838201526020016110b3565b5050505090500160405250505051816110e057fe5b046001016003600085815260200190815260200160002060040160029054906101000a900461ffff1661ffff161061117d5760008381526003602090815260409182902060048101805464ff000000001916600160201b17905560010154825142815292516001600160a01b039091169286927fec955d77e6e7d74e18b1c91977ef0f6fd5a6d02a28d1979686339fe69399782592918290030190a35b5060015b92915050565b6801bc16d674ec80000081565b601581565b606481565b60015481565b6040805160e08101825260008082526020820181905260609282018390529181018290526080810182905260a0810182905260c081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061122257805160ff191683800117855561124f565b8280016001018555821561124f579182015b8281111561124f578251825591602001919060010190611234565b5061125b92915061125f565b5090565b61127991905b8082111561125b5760008155600101611265565b9056fe44737420616c7265616479207061737365642c20596f752063616e207374617274207374616b696e67596f752063616e277420766f746520666f7220612070726f706f73616c207477696365a26469706673582212206be759f5874a15085d7c568f2dde1c276e4411e15f456de3eb0b1fc2d68fc46c64736f6c63430006010033")},
		},
	}
}

// DefaultRopstenGenesisBlock returns the Ropsten network genesis block.
func DefaultTestnetGenesisBlock() *Genesis {
	return &Genesis{
		Config:     params.TestnetChainConfig,
		Nonce:      0,
		ExtraData:  hexutil.MustDecode("0x00000000000000000000000000000000000000000000000000000000000000000941a01ab7b3a39ed6f55d6a4907778a3f15e5c90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
		GasLimit:   0x47b760,
		Difficulty: big.NewInt(1),
		Timestamp:  0x5fbb9e51,
		Alloc: map[common.Address]GenesisAccount{
			common.HexToAddress("0x2d2d68a59880eaacf24b96731956d287482dac4b"): {Balance: new(big.Int).Mul(big.NewInt(100000000), big.NewInt(1e18))},
			common.HexToAddress("0x000000000000000000000000000000000000f000"): {Balance: new(big.Int), Code: common.FromHex("0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063be645692116100a2578063db78dd2811610071578063db78dd281461022f578063e0d8ea5314610254578063ea7221a11461025c578063efd8d8e21461022f578063f62af26c1461028257610116565b8063be645692146101e3578063c967f90f146101eb578063cb1ea7251461020a578063d93d2cb91461021257610116565b80633a061bd3116100e95780633a061bd31461019b57806344c1aa99146101a35780636233be5d146101ab57806363e1d451146101b35780638129fc1c146101d957610116565b8063158ef93e1461011b5780631b5e358c146101375780632897183d1461015b57806332f3c17f14610175575b600080fd5b61012361029f565b604080519115158252519081900360200190f35b61013f6102a8565b604080516001600160a01b039092168252519081900360200190f35b6101636102ae565b60408051918252519081900360200190f35b6101636004803603602081101561018b57600080fd5b50356001600160a01b03166102b4565b61013f6102cf565b6101636102d5565b61013f6102db565b610123600480360360208110156101c957600080fd5b50356001600160a01b03166102e1565b6101e161050d565b005b61016361058f565b6101f361059c565b6040805161ffff9092168252519081900360200190f35b6101636105a1565b6101e16004803603602081101561022857600080fd5b50356105a7565b61023761084a565b6040805167ffffffffffffffff9092168252519081900360200190f35b61016361084f565b6101e16004803603602081101561027257600080fd5b50356001600160a01b0316610855565b61013f6004803603602081101561029857600080fd5b5035610b6b565b60005460ff1681565b61f00181565b60035481565b6001600160a01b031660009081526005602052604090205490565b61f00081565b60025481565b61f00281565b6000805460ff16610328576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b3361f0001461037e576040805162461bcd60e51b815260206004820152601860248201527f56616c696461746f727320636f6e7472616374206f6e6c790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600090815260056020526040902054156103b6576001600160a01b0382166000908152600560205260408120555b6001600160a01b03821660009081526005602052604090206002015460ff1680156103e2575060065415155b15610505576006546001600160a01b038316600090815260056020526040902060010154600019909101146104ac576006805460009190600019810190811061042757fe5b60009182526020808320909101546001600160a01b038681168452600590925260409092206001015460068054929093169350839291811061046557fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790558583168252600590526040808220600190810154949093168252902001555b60068054806104b757fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038416825260059052604081206001810191909155600201805460ff191690555b506001919050565b60005460ff161561055b576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b600480546001600160a01b03191661f000179055600860019081556018600255600c6003556000805460ff19169091179055565b6801bc16d674ec80000081565b601581565b60015481565b3341146105e8576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b4360009081526008602052604090205460ff1615610641576040805162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48191958dc99585cd959607a1b604482015290519081900360640190fd5b60005460ff16610687576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b8080438161069157fe5b06156106d7576040805162461bcd60e51b815260206004820152601060248201526f426c6f636b2065706f6368206f6e6c7960801b604482015290519081900360640190fd5b436000908152600860205260409020805460ff191660011790556006546106fd57610846565b60005b60065481101561081b576003546002548161071757fe5b04600560006006848154811061072957fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205411156107da576003546002548161076157fe5b04600560006006848154811061077357fe5b60009182526020808320909101546001600160a01b031683528201929092526040018120546006805493909103926005929190859081106107b057fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902055610813565b600060056000600684815481106107ed57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b600101610700565b506040517f181d51be54e8e8eaca6eae0eab32d4162099236bd519e7238d015d0870db464190600090a15b5050565b606481565b60065490565b334114610896576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b60005460ff166108dc576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b4360009081526007602052604090205460ff1615610934576040805162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c1d5b9a5cda195960821b604482015290519081900360640190fd5b436000908152600760209081526040808320805460ff191660011790556001600160a01b0384168352600590915290206002015460ff166109dd57600680546001600160a01b038316600081815260056020526040812060018082018590558085019095557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90930180546001600160a01b0319168317905552600201805460ff191690911790555b6001600160a01b03811660009081526005602052604090208054600101908190556002549081610a0957fe5b06610a965760048054604080516340a141ff60e01b81526001600160a01b0385811694820194909452905192909116916340a141ff9160248082019260009290919082900301818387803b158015610a6057600080fd5b505af1158015610a74573d6000803e3d6000fd5b5050506001600160a01b03821660009081526005602052604081205550610b29565b6001546001600160a01b03821660009081526005602052604090205481610ab957fe5b06610b295760048054604080516305dd095960e41b81526001600160a01b038581169482019490945290519290911691635dd095909160248082019260009290919082900301818387803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050505b6040805142815290516001600160a01b038316917f770e0cca42c35d00240986ce8d3ed438be04663c91dac6576b79537d7c180f1e919081900360200190a250565b60068181548110610b7857fe5b6000918252602090912001546001600160a01b031690508156fea264697066735822122038d998ce24eab6e0762f628c9ddd5e55fa1ae90956bbf1a9f8af4a1e602daf6364736f6c63430006010033")},
			common.HexToAddress("0x000000000000000000000000000000000000F001"): {Balance: new(big.Int), Code: common.FromHex("0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063be645692116100a2578063db78dd2811610071578063db78dd281461022f578063e0d8ea5314610254578063ea7221a11461025c578063efd8d8e21461022f578063f62af26c1461028257610116565b8063be645692146101e3578063c967f90f146101eb578063cb1ea7251461020a578063d93d2cb91461021257610116565b80633a061bd3116100e95780633a061bd31461019b57806344c1aa99146101a35780636233be5d146101ab57806363e1d451146101b35780638129fc1c146101d957610116565b8063158ef93e1461011b5780631b5e358c146101375780632897183d1461015b57806332f3c17f14610175575b600080fd5b61012361029f565b604080519115158252519081900360200190f35b61013f6102a8565b604080516001600160a01b039092168252519081900360200190f35b6101636102ae565b60408051918252519081900360200190f35b6101636004803603602081101561018b57600080fd5b50356001600160a01b03166102b4565b61013f6102cf565b6101636102d5565b61013f6102db565b610123600480360360208110156101c957600080fd5b50356001600160a01b03166102e1565b6101e161050d565b005b61016361058f565b6101f361059c565b6040805161ffff9092168252519081900360200190f35b6101636105a1565b6101e16004803603602081101561022857600080fd5b50356105a7565b61023761084a565b6040805167ffffffffffffffff9092168252519081900360200190f35b61016361084f565b6101e16004803603602081101561027257600080fd5b50356001600160a01b0316610855565b61013f6004803603602081101561029857600080fd5b5035610b6b565b60005460ff1681565b61f00181565b60035481565b6001600160a01b031660009081526005602052604090205490565b61f00081565b60025481565b61f00281565b6000805460ff16610328576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b3361f0001461037e576040805162461bcd60e51b815260206004820152601860248201527f56616c696461746f727320636f6e7472616374206f6e6c790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600090815260056020526040902054156103b6576001600160a01b0382166000908152600560205260408120555b6001600160a01b03821660009081526005602052604090206002015460ff1680156103e2575060065415155b15610505576006546001600160a01b038316600090815260056020526040902060010154600019909101146104ac576006805460009190600019810190811061042757fe5b60009182526020808320909101546001600160a01b038681168452600590925260409092206001015460068054929093169350839291811061046557fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790558583168252600590526040808220600190810154949093168252902001555b60068054806104b757fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038416825260059052604081206001810191909155600201805460ff191690555b506001919050565b60005460ff161561055b576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b600480546001600160a01b03191661f000179055600860019081556018600255600c6003556000805460ff19169091179055565b6801bc16d674ec80000081565b601581565b60015481565b3341146105e8576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b4360009081526008602052604090205460ff1615610641576040805162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48191958dc99585cd959607a1b604482015290519081900360640190fd5b60005460ff16610687576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b8080438161069157fe5b06156106d7576040805162461bcd60e51b815260206004820152601060248201526f426c6f636b2065706f6368206f6e6c7960801b604482015290519081900360640190fd5b436000908152600860205260409020805460ff191660011790556006546106fd57610846565b60005b60065481101561081b576003546002548161071757fe5b04600560006006848154811061072957fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205411156107da576003546002548161076157fe5b04600560006006848154811061077357fe5b60009182526020808320909101546001600160a01b031683528201929092526040018120546006805493909103926005929190859081106107b057fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902055610813565b600060056000600684815481106107ed57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b600101610700565b506040517f181d51be54e8e8eaca6eae0eab32d4162099236bd519e7238d015d0870db464190600090a15b5050565b606481565b60065490565b334114610896576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b60005460ff166108dc576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b4360009081526007602052604090205460ff1615610934576040805162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c1d5b9a5cda195960821b604482015290519081900360640190fd5b436000908152600760209081526040808320805460ff191660011790556001600160a01b0384168352600590915290206002015460ff166109dd57600680546001600160a01b038316600081815260056020526040812060018082018590558085019095557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90930180546001600160a01b0319168317905552600201805460ff191690911790555b6001600160a01b03811660009081526005602052604090208054600101908190556002549081610a0957fe5b06610a965760048054604080516340a141ff60e01b81526001600160a01b0385811694820194909452905192909116916340a141ff9160248082019260009290919082900301818387803b158015610a6057600080fd5b505af1158015610a74573d6000803e3d6000fd5b5050506001600160a01b03821660009081526005602052604081205550610b29565b6001546001600160a01b03821660009081526005602052604090205481610ab957fe5b06610b295760048054604080516305dd095960e41b81526001600160a01b038581169482019490945290519290911691635dd095909160248082019260009290919082900301818387803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050505b6040805142815290516001600160a01b038316917f770e0cca42c35d00240986ce8d3ed438be04663c91dac6576b79537d7c180f1e919081900360200190a250565b60068181548110610b7857fe5b6000918252602090912001546001600160a01b031690508156fea264697066735822122038d998ce24eab6e0762f628c9ddd5e55fa1ae90956bbf1a9f8af4a1e602daf6364736f6c63430006010033")},
			common.HexToAddress("0x000000000000000000000000000000000000F002"): {Balance: new(big.Int), Code: common.FromHex("0x608060405234801561001057600080fd5b50600436106101005760003560e01c806382c4b3b211610097578063c967f90f11610066578063c967f90f146103fc578063db78dd281461041b578063e823c81414610440578063efd8d8e21461041b57610100565b806382c4b3b214610327578063a224cee71461034d578063a4c4d922146103bd578063be645692146103e257610100565b80631f4f7d29116100d35780631f4f7d29146101c157806332ed5b121461023f5780633a061bd3146103175780636233be5d1461031f57610100565b8063158ef93e1461010557806315ea2781146101215780631b5e358c146101475780631db5ade81461016b575b600080fd5b61010d610448565b604080519115158252519081900360200190f35b61010d6004803603602081101561013757600080fd5b50356001600160a01b0316610451565b61014f610506565b604080516001600160a01b039092168252519081900360200190f35b6101976004803603604081101561018157600080fd5b506001600160a01b03813516906020013561050c565b604080516001600160a01b0390941684526020840192909252151582820152519081900360600190f35b61010d600480360360408110156101d757600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561020157600080fd5b82018360208201111561021357600080fd5b803590602001918460018302840111600160201b8311171561023457600080fd5b509092509050610545565b61025c6004803603602081101561025557600080fd5b503561081f565b604080516001600160a01b03808a16825288166020808301919091526060820187905261ffff8087166080840152851660a083015283151560c083015260e0928201838152885193830193909352875191929161010084019189019080838360005b838110156102d65781810151838201526020016102be565b50505050905090810190601f1680156103035780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b61014f6108fe565b61014f610904565b61010d6004803603602081101561033d57600080fd5b50356001600160a01b031661090a565b6103bb6004803603602081101561036357600080fd5b810190602081018135600160201b81111561037d57600080fd5b82018360208201111561038f57600080fd5b803590602001918460208302840111600160201b831117156103b057600080fd5b50909250905061091f565b005b61010d600480360360408110156103d357600080fd5b50803590602001351515610a6a565b6103ea611187565b60408051918252519081900360200190f35b610404611194565b6040805161ffff9092168252519081900360200190f35b610423611199565b6040805167ffffffffffffffff9092168252519081900360200190f35b6103ea61119e565b60005460ff1681565b60003361f000146104a9576040805162461bcd60e51b815260206004820152601860248201527f56616c696461746f727320636f6e7472616374206f6e6c790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600081815260026020908152604091829020805460ff19169055815142815291517f4e0b191f7f5c32b1b5e3704b68874b1a3980147cae00be8ece271bfb5b92c07a9281900390910190a2506001919050565b61f00181565b60046020908152600092835260408084209091529082529020805460018201546002909201546001600160a01b03909116919060ff1683565b6001600160a01b03831660009081526002602052604081205460ff161561059d5760405162461bcd60e51b815260040180806020018281038252602981526020018061127d6029913960400191505060405180910390fd5b6000338585854260405160200180866001600160a01b03166001600160a01b031660601b8152601401856001600160a01b03166001600160a01b031660601b81526014018484808284379190910192835250506040805180830381526020928301909152805191012094505050610bb885111591506106589050576040805162461bcd60e51b815260206004820152601060248201526f44657461696c7320746f6f206c6f6e6760801b604482015290519081900360640190fd5b60008181526003602081905260409091200154156106bd576040805162461bcd60e51b815260206004820152601760248201527f50726f706f73616c20616c726561647920657869737473000000000000000000604482015290519081900360640190fd5b6106c56111a4565b3381526001600160a01b03861660208083019190915260408051601f870183900483028101830190915285815290869086908190840183828082843760009201829052506040808701958652426060880152878252600360209081529120865181546001600160a01b039182166001600160a01b031991821617835583890151600184018054919093169116179055945180518796955061076f94506002860193509101906111e1565b506060820151600382015560808201516004909101805460a084015160c09094015161ffff1990911661ffff9384161763ffff000019166201000093909416929092029290921764ff000000001916600160201b911515919091021790556040805142815290516001600160a01b03881691339185917fc10f2f4d53a0e342536c6af3cce9c6ee25c32dbb323521ce0e1d4494a3e362e8916020918190039190910190a450600195945050505050565b60036020908152600091825260409182902080546001808301546002808501805488516101009582161595909502600019011691909104601f81018790048702840187019097528683526001600160a01b03938416969390911694919290918301828280156108cf5780601f106108a4576101008083540402835291602001916108cf565b820191906000526020600020905b8154815290600101906020018083116108b257829003601f168201915b50505050600383015460049093015491929161ffff80821692506201000082041690600160201b900460ff1687565b61f00081565b61f00281565b60026020526000908152604090205460ff1681565b60005460ff161561096d576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b62093a80600155600580546001600160a01b03191661f00017905560005b81811015610a585760008383838181106109a157fe5b905060200201356001600160a01b03166001600160a01b03161415610a0d576040805162461bcd60e51b815260206004820152601960248201527f496e76616c69642076616c696461746f72206164647265737300000000000000604482015290519081900360640190fd5b600160026000858585818110610a1f57fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff191691151591909117905560010161098b565b50506000805460ff1916600117905550565b60055460408051631015428760e21b815233600482015290516000926001600160a01b0316916340550a1c916024808301926020929190829003018186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d6020811015610adf57600080fd5b5051610b23576040805162461bcd60e51b815260206004820152600e60248201526d56616c696461746f72206f6e6c7960901b604482015290519081900360640190fd5b60008381526003602081905260409091200154610b7c576040805162461bcd60e51b8152602060048201526012602482015271141c9bdc1bdcd85b081b9bdd08195e1a5cdd60721b604482015290519081900360640190fd5b33600090815260046020908152604080832086845290915290206001015415610bd65760405162461bcd60e51b81526004018080602001828103825260238152602001806112a66023913960400191505060405180910390fd5b60015460008481526003602081905260409091200154014210610c33576040805162461bcd60e51b815260206004820152601060248201526f141c9bdc1bdcd85b08195e1c1a5c995960821b604482015290519081900360640190fd5b336000818152600460209081526040808320878452825291829020426001820181905581546001600160a01b031916851782556002909101805460ff1916871515908117909155835190815291820152815186927f6c59bda68cac318717c60c7c9635a78a0f0613f9887cc18a7157f5745a86d14e928290030190a38115610ce1576000838152600360205260409020600401805461ffff8082166001011661ffff19909116179055610d15565b60008381526003602052604090206004018054600161ffff62010000808404821692909201160263ffff0000199091161790555b6000838152600360209081526040808320600101546001600160a01b03168352600290915290205460ff1680610d635750600083815260036020526040902060040154600160201b900460ff165b15610d7057506001611181565b600554604080516313bce04b60e31b815290516002926001600160a01b031691639de70258916004808301926000929190829003018186803b158015610db557600080fd5b505afa158015610dc9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610df257600080fd5b8101908080516040519392919084600160201b821115610e1157600080fd5b908301906020820185811115610e2657600080fd5b82518660208202830111600160201b82111715610e4257600080fd5b82525081516020918201928201910280838360005b83811015610e6f578181015183820152602001610e57565b505050509050016040525050505181610e8457fe5b60008581526003602052604090206004015491900460010161ffff90911610610fcc576000838152600360208181526040808420600181810180546001600160a01b03908116885260028652848820805460ff19169093179092558987529484526004918201805464ff000000001916600160201b1790556005549454835163415e9ec960e11b815290821692810192909252915193909116936382bd3d9293602480840194939192918390030190829087803b158015610f4457600080fd5b505af1158015610f58573d6000803e3d6000fd5b505050506040513d6020811015610f6e57600080fd5b505060008381526003602090815260409182902060010154825142815292516001600160a01b039091169286927fc9d96d61eb62031865c523ae107f3c22f5ed445af237636bcd88bea1705c70d592918290030190a3506001611181565b600554604080516313bce04b60e31b815290516002926001600160a01b031691639de70258916004808301926000929190829003018186803b15801561101157600080fd5b505afa158015611025573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561104e57600080fd5b8101908080516040519392919084600160201b82111561106d57600080fd5b90830190602082018581111561108257600080fd5b82518660208202830111600160201b8211171561109e57600080fd5b82525081516020918201928201910280838360005b838110156110cb5781810151838201526020016110b3565b5050505090500160405250505051816110e057fe5b046001016003600085815260200190815260200160002060040160029054906101000a900461ffff1661ffff161061117d5760008381526003602090815260409182902060048101805464ff000000001916600160201b17905560010154825142815292516001600160a01b039091169286927fec955d77e6e7d74e18b1c91977ef0f6fd5a6d02a28d1979686339fe69399782592918290030190a35b5060015b92915050565b6801bc16d674ec80000081565b601581565b606481565b60015481565b6040805160e08101825260008082526020820181905260609282018390529181018290526080810182905260a0810182905260c081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061122257805160ff191683800117855561124f565b8280016001018555821561124f579182015b8281111561124f578251825591602001919060010190611234565b5061125b92915061125f565b5090565b61127991905b8082111561125b5760008155600101611265565b9056fe44737420616c7265616479207061737365642c20596f752063616e207374617274207374616b696e67596f752063616e277420766f746520666f7220612070726f706f73616c207477696365a26469706673582212206be759f5874a15085d7c568f2dde1c276e4411e15f456de3eb0b1fc2d68fc46c64736f6c63430006010033")},
		},
	}
}

// DeveloperGenesisBlock returns the 'geth --dev' genesis block.
func DeveloperGenesisBlock(period uint64, faucet common.Address) *Genesis {
	// Override the default period to the user requested one
	config := *params.AllCliqueProtocolChanges
	config.Clique.Period = period

	// Assemble and return the genesis with the precompiles and faucet pre-funded
	return &Genesis{
		Config:     &config,
		ExtraData:  append(append(make([]byte, 32), faucet[:]...), make([]byte, crypto.SignatureLength)...),
		GasLimit:   11500000,
		Difficulty: big.NewInt(1),
		Alloc: map[common.Address]GenesisAccount{
			common.BytesToAddress([]byte{1}): {Balance: big.NewInt(1)}, // ECRecover
			common.BytesToAddress([]byte{2}): {Balance: big.NewInt(1)}, // SHA256
			common.BytesToAddress([]byte{3}): {Balance: big.NewInt(1)}, // RIPEMD
			common.BytesToAddress([]byte{4}): {Balance: big.NewInt(1)}, // Identity
			common.BytesToAddress([]byte{5}): {Balance: big.NewInt(1)}, // ModExp
			common.BytesToAddress([]byte{6}): {Balance: big.NewInt(1)}, // ECAdd
			common.BytesToAddress([]byte{7}): {Balance: big.NewInt(1)}, // ECScalarMul
			common.BytesToAddress([]byte{8}): {Balance: big.NewInt(1)}, // ECPairing
			common.BytesToAddress([]byte{9}): {Balance: big.NewInt(1)}, // BLAKE2b
			faucet:                           {Balance: new(big.Int).Sub(new(big.Int).Lsh(big.NewInt(1), 256), big.NewInt(9))},
		},
	}
}

func decodePrealloc(data string) GenesisAlloc {
	var p []struct {
		Addr    *big.Int
		Balance *big.Int
		Code    []byte
	}
	if err := rlp.NewStream(strings.NewReader(data), 0).Decode(&p); err != nil {
		panic(err)
	}
	ga := make(GenesisAlloc, len(p))
	for _, account := range p {
		ga[common.BigToAddress(account.Addr)] = GenesisAccount{Balance: account.Balance, Code: account.Code}
	}
	return ga
}
